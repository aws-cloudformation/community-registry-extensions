AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure for the Okta community registry extensions CICD pipeline

Parameters:
  Env:
    Type: String
    Description: The environment, cicd or beta
    AllowedValues: ["cicd", "beta"]

  GitUrl:
    Type: String
    Description: The URL to the Git repo to clone

  GitBranch:
    Type: String
    Description: The branch to clone

  GitHubSecretArn: 
    Type: String
    Description: The arn to the github webhook secret

  Prefix:
    Type: String
    Description: The extension prefix, for example, AwsCommunity

  PrefixLower:
    Type: String
    Description: The extension prefix lowercase, for example, awscommunity. It's either this or depend on a macro, or put more stars in policies.

  PublishBuildBucketName:
    Type: String
    Description: The name of the bucket to drop builds from the beta account when all integ tests succeed. In prod it should be community-registry-extensions-publish-build

  ProdAccountId:
    Type: String
    Description: Account ID for prod, required to share the KMS key so beta can deploy builds to the publish bucket

Conditions:
  IsBeta: !Equals
    - !Ref Env
    - beta

Resources:

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "cep-okta-${Env}-${AWS::AccountId}-artifact-bucket"

  ArtifactBucketPolicy:
    Metadata:
      Comment: Allows the beta account to use an assumed role in the prod account to drop builds into the prod account
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: BetaProdCrossAccount
            Effect: Allow
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${ProdAccountId}:root"
            Action: 
              - s3:Put*
              - s3:Get*
              - s3:List*
            Resource: 
              - !Sub "arn:aws:s3:::cep-okta-${Env}-${AWS::AccountId}-artifact-bucket"
              - !Sub "arn:aws:s3:::cep-okta-${Env}-${AWS::AccountId}-artifact-bucket/*" 

  # TODO - This is the same for each namespace, can we deploy it to be shared by all?
  # Question is how to associate it to each project role.
  # And we also embed the prefix in a few places. It would need more stars.
  CommonBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Metadata:
      Comment: All build projects share this policy. Permissions are wide in some cases due to the way the cfn cli works.
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: "*"
          - Action:
              - kms:CreateKey
              - kms:DeleteKey
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: "*"
          - Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:GetRolePolicy
              - iam:PassRole
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'

          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt ArtifactBucket.Arn
              - !Sub "${ArtifactBucket.Arn}/*"
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/setup-${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/integ-*'
          - Action:
              - cloudformation:ListExports
              - cloudformation:DescribeStacks
              - cloudformation:DescribeType
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/CloudFormationManagedUploadInfrastructure/*'
          - Action:
              - cloudformation:RegisterType
              - cloudformation:DescribeTypeRegistration
              - cloudformation:SetTypeDefaultVersion
              - cloudformation:SetTypeConfiguration
              - cloudformation:DescribeType
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/RESOURCE/${Prefix}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/resource/${Prefix}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/HOOK/${Prefix}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/hook/${Prefix}*'
          - Action:
              - cloudformation:DescribeTypeRegistration
              - cloudformation:DescribeType
              - cloudformation:ListTypes
              - cloudformation:ListExports
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      PolicyName: common-build-project-policy
      Roles:
        - !Ref OktaGroupMembershipBuildProjectRole 

  SourceBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: The name is important here since it gets constructed by the webhook handler and CodeBuild job to drop the build into the correct bucket. We only use a one webhook for AwsCommunity and 3rd parties like Okta.
    Properties:
      BucketName: !Sub "cep-source-${AWS::AccountId}-${Env}-${PrefixLower}"
      VersioningConfiguration: 
        Status: Enabled

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cep-okta-${Env}-pipeline-role"
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: extension-pipeline-policy
      Roles: 
        - !Ref PipelineRole
      PolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Resource:
              #- !Sub "arn:aws:iam::${ProdAccountId}:role/community-registry-extensions-publish-role"
              # Circular reference between this and cicd-prod.yml for sandbox deployment
              - !Sub "arn:aws:iam::${ProdAccountId}:role/community-*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt ArtifactBucket.Arn
              - !Join
                - ''
                - - !GetAtt ArtifactBucket.Arn
                  - /*
              - !GetAtt SourceBucket.Arn
              - !Join
                - ''
                - - !GetAtt SourceBucket.Arn
                  - /*
              - !Sub "arn:aws:s3:::${PublishBuildBucketName}"
              - !Sub "arn:aws:s3:::${PublishBuildBucketName}/*"
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource: 
              - !GetAtt OktaGroupMembershipBuildProject.Arn 
          - Action:
              - kms:*
            Effect: Allow
            Resource: "*"

  PipelineKey:
    Type: AWS::KMS::Key
    Metadata: 
      Comment: Required for cross account deployment from beta CodePipeline to the prod bucket
    Condition: IsBeta
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties: 
      Description: This key is used by the CEP beta build process to deploy builds to the prod bucket
      KeyPolicy: 
        Statement:
          - Action: 
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal: 
              AWS: 
                - !Sub "arn:aws:iam::${ProdAccountId}:root"
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/Admin"
            Resource: "*"
          - Action: 
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Effect: Allow
            Principal: 
              AWS: 
                - !GetAtt PipelineRole.Arn
                - !Sub "arn:aws:iam::${ProdAccountId}:root"
                - !GetAtt OktaGroupMembershipBuildProjectRole.Arn
            Resource: "*"
      MultiRegion: true

  PipelineKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsBeta
    Properties:
      AliasName: alias/cep-okta-pipeline-publish-key
      TargetKeyId: !Ref PipelineKey

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Metadata:
      Comment: In cicd this pipeline runs cfn test on all extensions. In beta this pipeline runs integ tests on all extensions, then drops the build into the prod account for publishing
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore: !If
        - IsBeta
        - Type: S3
          Location: !Ref ArtifactBucket
          EncryptionKey:
            Id: !Ref PipelineKey
            Type: KMS
        - Type: S3
          Location: !Ref ArtifactBucket
          EncryptionKey: !Ref AWS::NoValue
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration: 
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: "source.zip" 
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: extensions-source 
        - Name: Build
          Actions:
            - Name: OktaGroupMembership
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref OktaGroupMembershipBuildProject
                EnvironmentVariables: |-
                  [
                    {
                      "name": "RESOURCE_PATH",
                      "type": "PLAINTEXT",
                      "value": "Okta-Group-Membership"
                    }
                  ]
              RunOrder: 1
        - !If
          - IsBeta
          - Name: CopyBuildToProd
            Actions:
              - Name: Copy
                RoleArn: !Sub "arn:aws:iam::${ProdAccountId}:role/community-registry-extensions-publish-role"
                InputArtifacts: 
                  - Name: extensions-source
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: S3
                  Version: 1
                Configuration:
                  BucketName: !Ref PublishBuildBucketName
                  Extract: false
                  ObjectKey: build.zip
                  KMSEncryptionKeyARN: !GetAtt PipelineKey.Arn
          - !Ref AWS::NoValue

  PublishBuildBucketRole:
    Type: AWS::IAM::Role
    Condition: IsBeta
    Metadata:
      Comment: Allows the beta account to put builds into the prod bucket
    Properties:
      RoleName: cep-okta-publish-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: put-builds
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: s3:PutObject
                Resource: 
                  - !Sub "arn:aws:s3:::${PublishBuildBucketName}"
                  - !Sub "arn:aws:s3:::${PublishBuildBucketName}/*"


  OktaGroupMembershipBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  OktaGroupMembershipBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: RESOURCE_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-resource"
      ServiceRole: !GetAtt OktaGroupMembershipBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "${Env}-buildspec.yml"

  OktaGroupMembershipBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: 
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:okta-group-membership-type-configuration*"
        Version: '2012-10-17'
      PolicyName: okta-group-membership-build-project-policy
      Roles:
        - !Ref OktaGroupMembershipBuildProjectRole

  SourceEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline ] ]

  SourceEventRule:
    Type: AWS::Events::Rule
    Metadata:
      Comments: Starts the pipeline when we see source.zip from the webhook build job
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - !Sub "cep-source-${AWS::AccountId}-${Env}-okta"
            key:
              - "source.zip" 
      Targets:
        -
          Arn:
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline ] ]
          RoleArn: !GetAtt SourceEventRole.Arn
          Id: codepipeline-Pipeline

