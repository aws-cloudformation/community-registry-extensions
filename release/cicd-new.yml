AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure for the community registry extensions CICD
Metadata:
  cfn-lint:
    config:
      regions:
        - us-east-1
      ignore_checks:
        - W3002
Parameters:
  Env:
    Type: String
    Description: The environment, cicd or beta
    AllowedValues: ["cicd", "beta"]
  GitUrl:
    Type: String
    Description: The URL to the Git repo to clone
  GitBranch:
    Type: String
    Description: The branch to clone
  GitHubSecretArn: 
    Type: String
    Description: The arn to the github webhook secret
  Prefix:
    Type: String
    Description: The extension prefix, for example, AwsCommunity
  PrefixLower:
    Type: String
    Description: The extension prefix lowercase, for example, awscommunity. It's either this or depend on a macro, or put more stars in policies.

Resources:

  ArtifactBucket:
    Type: AWS::S3::Bucket

  ###########################
  # Hooks
  ###########################

  S3BucketVersioning:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cicd-hook.yml
      Parameters: 
        Env: !Ref Env
        BuildManagedPolicyArn: !Ref CommonBuildProjectIamPolicy
        FolderName: "S3_BucketVersioningEnabled"

  CloudFrontLoggingEnabled:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cicd-hook.yml
      Parameters: 
        Env: !Ref Env
        BuildManagedPolicyArn: !Ref CommonBuildProjectIamPolicy
        FolderName: "CloudFront_LoggingEnabled"

  ###########################
  # Resources
  ###########################

  S3BucketNotification:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cicd-resource.yml
      Parameters: 
        Env: !Ref Env
        BuildManagedPolicyArn: !Ref CommonBuildProjectIamPolicy
        FolderName: "S3_BucketNotification"

  S3DeleteBucketContents:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cicd-resource.yml
      Parameters: 
        Env: !Ref Env
        BuildManagedPolicyArn: !Ref CommonBuildProjectIamPolicy
        FolderName: "S3_DeleteBucketContents"

  CloudFrontWebAclAssociation:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cicd-resource.yml
      Parameters: 
        Env: !Ref Env
        BuildManagedPolicyArn: !Ref CommonBuildProjectIamPolicy
        FolderName: "CloudFront_WebACLAssociation"
  
  ResourceIamPasswordPolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  CommonBuildProjectIamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: "*"
          - Action:
              - kms:CreateKey
              - kms:DeleteKey
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: "*"
          - Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:GetRolePolicy
              - iam:PassRole
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'

          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt ArtifactBucket.Arn
              - !Sub "${ArtifactBucket.Arn}/*"
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/setup-${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/integ-*'
          - Action:
              - cloudformation:ListExports
              - cloudformation:DescribeStacks
              - cloudformation:DescribeType
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/CloudFormationManagedUploadInfrastructure/*'
          - Action:
              - cloudformation:RegisterType
              - cloudformation:DescribeTypeRegistration
              - cloudformation:SetTypeDefaultVersion
              - cloudformation:SetTypeConfiguration
              - cloudformation:DescribeType
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/RESOURCE/${Prefix}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/resource/${Prefix}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/HOOK/${Prefix}*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:type/hook/${Prefix}*'
          - Action:
              - cloudformation:DescribeTypeRegistration
              - cloudformation:DescribeType
              - cloudformation:ListTypes
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      ManagedPolicyName: common-build-project-policy

  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration: 
        Status: Enabled

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: extension-pipeline-policy
      Roles: 
        - !Ref PipelineRole
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt ArtifactBucket.Arn
              - !Sub "${ArtifactBucket.Arn}/*"
              - !GetAtt SourceBucket.Arn
              - !Sub "${SourceBucket.Arn}/*"
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource: 
              - !GetAtt S3BucketNotification.Outputs.BuildProjectArn
              - !GetAtt S3DeleteBucketContents.Outputs.BuildProjectArn
              - !GetAtt S3BucketVersioning.Outputs.BuildProjectArn
              - !GetAtt CloudFrontLoggingEnabled.Outputs.BuildProjectArn
  
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - !Ref SourceBucket
            key:
              - "source.zip" 
      Targets:
        -
          Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: codepipeline-Pipeline

  AWSCloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AWSCloudTrailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt AWSCloudTrailBucket.Arn
          -
            Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${AWSCloudTrailBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition: 
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  
  AWSCloudTrailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  
  AwsCloudTrail:
    DependsOn:
      - AWSCloudTrailBucketPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      S3BucketName: !Ref AWSCloudTrailBucket
      EventSelectors:
        -
          DataResources:
            -
              Type: AWS::S3::Object
              Values: 
              - !Sub "${SourceBucket.Arn}/source.zip"
          ReadWriteType: WriteOnly
          IncludeManagementEvents: false
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true


  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration: 
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: "source.zip" 
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: extensions-source 
        - Name: Build
          Actions:
            - Name: BucketNotification
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !GetAtt CloudFrontLoggingEnabled.Outputs.BuildProjectName
              RunOrder: 1
            - Name: CloudFrontWebAclAssociation
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !GetAtt CloudFrontWebAclAssociation.Outputs.BuildProjectName
              RunOrder: 2
            - Name: DeleteBucketContents
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !GetAtt S3DeleteBucketContents.Outputs.BuildProjectName
              RunOrder: 2
            - Name: S3BucketVersioningEnabled
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !GetAtt S3BucketVersioning.Outputs.BuildProjectName
              RunOrder: 2
            - Name: CloudFrontLoggingEnabled
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !GetAtt CloudFrontLoggingEnabled.Outputs.BuildProjectName
              RunOrder: 2

  WebHookBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - 
          PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: 
                  - !GetAtt SourceBucket.Arn
                  - !Sub '${SourceBucket.Arn}/*'
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Effect: Allow
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
            Version: '2012-10-17'
          PolicyName: webhook-build-project-policy

  WebHookBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: false
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: GIT_URL
          Type: PLAINTEXT
          Value: !Ref GitUrl
        - Name: GIT_BRANCH
          Type: PLAINTEXT
          Value: !Ref GitBranch
        - Name: SOURCE_BUCKET
          Type: PLAINTEXT
          Value: !Ref SourceBucket
        - Name: SOURCE_KEY
          Type: PLAINTEXT
          Value: "source.zip"
        - Name: COMMIT_MESSAGE
          Type: PLAINTEXT
          Value: "Placeholder - lambda will provide when it invokes"
      ServiceRole: !GetAtt WebHookBuildProjectRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo $GIT_URL
                - echo $GIT_BRANCH
                - echo $SOURCE_BUCKET
                - git clone --depth=1 --branch=$GIT_BRANCH $GIT_URL /tmp/source
                - cd /tmp/source
                - zip -r source.zip *  
                - aws s3 cp source.zip s3://$SOURCE_BUCKET/ --metadata '{"codepipeline-artifact-revision-summary":"$COMMIT_MESSAGE"}'


  WebHookHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: lambdaexec
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Action:
                  - codebuild:StartBuild 
                Effect: Allow
                Resource: !GetAtt WebHookBuildProject.Arn 
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource: !Ref GitHubSecretArn 

  WebHookHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import hashlib
          import hmac
          import boto3
          def handler(event, context):
              print(json.dumps(event, default=str))
              secret_name = 'github-webhook'
              session = boto3.session.Session()
              client = boto3.client("secretsmanager")
              get_secret_value_response = client.get_secret_value(SecretId=secret_name)
              secret = get_secret_value_response['SecretString']
              digest = hmac.new(
                  secret.encode('utf-8'), event['body'].encode('utf-8'), hashlib.sha1
              ).hexdigest()
              sig_parts = event['headers']['X-Hub-Signature'].split('=', 1)
              if (
                  len(sig_parts) < 2
                  or sig_parts[0] != 'sha1'
                  or not hmac.compare_digest(sig_parts[1], digest)
              ):
                  print('Digest comparison failed')
                  raise Exception()
              print('Secret Ok')
              payload = json.loads(event['body'])
              print('payload', json.dumps(payload, default=str))
              codebuild = session.client("codebuild")
              codebuild.start_build(projectName='${WebHookBuildProject}',
                environmentVariablesOverride=[
                  {
                    'name': 'COMMIT_MESSAGE',
                    'value': payload['head_commit']['message'],
                    'type': 'PLAINTEXT'
                  }])
              return {
                'statusCode': 200,
                'headers': {},
                'body': payload['head_commit']['message'],
              }
                    
      Role: !GetAtt WebHookHandlerRole.Arn
      Handler: index.handler
      Runtime: python3.7
      MemorySize: 1024
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref SourceBucket
          SOURCE_KEY: "source.zip"
          GIT_URL: !Ref GitUrl
          GIT_BRANCH: !Ref GitBranch

  WebHookRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GitHubWebHook

  WebHookCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      Path: /
      Policies:
        -
          PolicyName: cwlogsapigateway
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: "*"

  WebHookAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt WebHookCloudWatchRole.Arn
    DependsOn: WebHookRestApi

  WebHookDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WebHookRestApi
    DependsOn:
      - WebHookANYProxy
      - WebHookANYRoot

  WebHookStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref WebHookRestApi
      DeploymentId: !Ref WebHookDeployment
      StageName: prod

  WebHookProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WebHookRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref WebHookRestApi

  WebHookRestApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebHookHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebHookRestApi}/*/*/*" 

  WebHookRestApiRootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebHookHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebHookRestApi}/*/*/" 

  WebHookANYRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt WebHookRestApi.RootResourceId
      RestApiId: !Ref WebHookRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebHookHandler.Arn}/invocations"

  WebHookANYProxy:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref WebHookProxy
      RestApiId: !Ref WebHookRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebHookHandler.Arn}/invocations"


