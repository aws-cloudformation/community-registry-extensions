AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure for the community registry extensions CICD pipeline

Parameters:

  Env:
    Type: String
    Description: The environment, alpha, beta, or prod. In a sandbox these are all in one account, but the actual deployment is to three different accounts.
    AllowedValues: ["alpha", "beta", "prod"]

  GitUrl:
    Type: String
    Description: The URL to the Git repo to clone

  GitBranch:
    Type: String
    Description: The branch to clone

  GitHubSecretArn: 
    Type: String
    Description: The arn to the github webhook secret

  Prefix:
    Type: String
    Description: The extension prefix, for example, AwsCommunity

  PrefixLower:
    Type: String
    Description: The extension prefix lowercase, for example, awscommunity. It's either this or depend on a macro, or put more stars in policies.

  BetaAccountId:
    Type: String
    Description: AccountId for the beta account, which pushes builds to the prod source bucket 

  ProdAccountId:
    Type: String
    Description: Account ID for prod, required to share the KMS key so beta can deploy builds to the prod source bucket

  NotificationEmail:
    Type: String
    Description: Email address for pipeline notifications

Conditions:

  IsBeta: !Equals
    - !Ref Env
    - beta

  IsProd: !Equals
    - !Ref Env
    - prod

  IsNotProd: !Not
    - !Equals
      - !Ref Env
      - prod

Resources:

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: CodePipeline artifacts
    Properties:
      BucketName: !Sub "cep-${Env}-${AWS::AccountId}-artifacts"

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsBeta
    Metadata:
      Comment: Allows the beta account to use an assumed role in the prod account to drop builds into the prod account
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: BetaProdCrossAccount
            Effect: Allow
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${ProdAccountId}:root"
            Action: 
              - s3:Put*
              - s3:Get*
              - s3:List*
            Resource: 
              - !Sub "arn:aws:s3:::cep-${Env}-${AWS::AccountId}-artifacts"
              - !Sub "arn:aws:s3:::cep-${Env}-${AWS::AccountId}-artifacts/*" 

  S3BucketVersioningEnabledBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  CloudFrontLoggingEnabledBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  S3BucketNotificationBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  S3DeleteBucketContentsBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  CloudFrontWebAclAssociationBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'
  
  ResourceIamPasswordPolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'

  CommonBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: "*"
          - Action:
              - kms:CreateKey
              - kms:DeleteKey
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: "*"
          - Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:GetRolePolicy
              - iam:PassRole
              - iam:UpdateAssumeRolePolicyDocument
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${PrefixLower}*'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'

          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt ArtifactBucket.Arn
              - !Sub "${ArtifactBucket.Arn}/*"
          - Action:
              - cloudformation:*
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      PolicyName: common-build-project-policy
      Roles:
        - !Ref S3BucketNotificationBuildProjectRole
        - !Ref S3DeleteBucketContentsBuildProjectRole
        - !Ref S3BucketVersioningEnabledBuildProjectRole
        - !Ref CloudFrontLoggingEnabledBuildProjectRole
        - !Ref CloudFrontWebAclAssociationBuildProjectRole

  S3BucketNotificationBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - lambda:AddPermission
              - lambda:RemovePermission
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:GetBucketNotification
              - s3:PutBucketNotification
              - sns:AddPermission
              - sns:ConfirmSubscription
              - sns:CreateTopic
              - sns:DeleteTopic
              - sns:GetTopicAttributes
              - sns:RemovePermission
              - sns:SetTopicAttributes
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:AddPermission
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SetQueueAttributes
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      PolicyName: bucket-notification-build-project-policy
      Roles:
        - !Ref S3BucketNotificationBuildProjectRole

  S3DeleteBucketContentsBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:ListBucket
              - s3:GetBucketNotification
              - s3:PutBucketNotification
              - s3:GetBucketTagging
              - s3:PutBucketTagging
              - s3:ListObjectVersions
              - s3:DeleteObject
              - s3:ListBucketVersions
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      PolicyName: delete-bucket-contents-build-project-policy
      Roles:
        - !Ref S3DeleteBucketContentsBuildProjectRole

  CloudFrontWebAclAssociationBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:DeleteRole
              - wafv2:ListTagsForResource
              - wafv2:GetWebACL
              - wafv2:CreateWebACL
              - wafv2:DeleteWebACL
              - cloudfront:ListCloudFrontOriginAccessIdentities
              - cloudfront:TagResource
              - cloudfront:CreateDistribution
              - cloudfront:GetDistribution
              - cloudfront:CreateCloudFrontOriginAccessIdentity
              - cloudfront:ListDistributions
              - cloudfront:GetCloudFrontOriginAccessIdentity
              - cloudfront:DeleteDistribution
              - cloudfront:UpdateDistribution
              - cloudfront:DeleteCloudFrontOriginAccessIdentity
              - s3:PutObject
              - s3:GetObject
              - s3:PutBucketWebsite
              - s3:GetEncryptionConfiguration
              - s3:ListAllMyBuckets
              - s3:PutBucketPolicy
              - s3:GetBucketLocation
              - s3:DeleteBucket
              - s3:CreateBucket
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:PutBucketCORS
              - s3:DeleteBucketPolicy
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      PolicyName: cloudfront-webacl-association-build-project-policy
      Roles:
        - !Ref CloudFrontWebAclAssociationBuildProjectRole
  
  ResourceIamPasswordPolicyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:DeleteRole
              - s3:PutObject
              - s3:GetObject
              - s3:PutBucketWebsite
              - s3:GetEncryptionConfiguration
              - s3:ListAllMyBuckets
              - s3:PutBucketPolicy
              - s3:GetBucketLocation
              - s3:DeleteBucket
              - s3:CreateBucket
              - s3:ListBucket
              - s3:GetBucketPolicy
              - s3:PutBucketCORS
              - s3:DeleteBucketPolicy
            Effect: Allow
            Resource: "*"
        Version: '2012-10-17'
      PolicyName: cloudfront-webacl-association-build-project-policy
      Roles:
        - !Ref ResourceIamPasswordPolicyRole

  S3BucketNotificationBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PrefixLower}-${Env}-s3-bucketnotification"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: RESOURCE_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-resource"
      ServiceRole: !GetAtt S3BucketNotificationBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "resources/${Env}-buildspec-python.yml"

  IamPasswordPolicyBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PrefixLower}-${Env}-iam-passwordpolicy"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: RESOURCE_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-resource"
      ServiceRole: !GetAtt ResourceIamPasswordPolicyRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "resources/${Env}-buildspec-python.yml"

  CloudFrontWebAclAssociationBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PrefixLower}-${Env}-cloudfront-webaclassociation"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: RESOURCE_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-resource"
      ServiceRole: !GetAtt CloudFrontWebAclAssociationBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "resources/${Env}-buildspec-python.yml"

  S3DeleteBucketContentsBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PrefixLower}-${Env}-s3-deletebucketcontents"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: RESOURCE_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-resource"
      ServiceRole: !GetAtt S3DeleteBucketContentsBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "resources/${Env}-buildspec-python.yml"

  S3BucketVersioningEnabledBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PrefixLower}-${Env}-s3-bucketversioningenabled"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: HOOK_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-hook"
      ServiceRole: !GetAtt S3BucketVersioningEnabledBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "hooks/${Env}-buildspec-python.yml"

  CloudFrontLoggingEnabledBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PrefixLower}-${Env}-cloudfront-loggingenabled"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cep-cicd:latest"
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: HOOK_PATH
          Type: PLAINTEXT
          Value: "placeholder-for-path-to-resource"
      ServiceRole: !GetAtt CloudFrontLoggingEnabledBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub "hooks/${Env}-buildspec-python.yml"

  SourceBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: The name is important here since it gets constructed by the webhook handler and CodeBuild job to drop the build into the correct bucket. We only use a one webhook for AwsCommunity and 3rd parties like Okta.
    Properties:
      BucketName: !Sub "cep-source-${AWS::AccountId}-${Env}-${PrefixLower}"
      VersioningConfiguration: 
        Status: Enabled

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cep-${Env}-pipeline-role"
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: extension-pipeline-policy
      Roles: 
        - !Ref PipelineRole
      PolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:iam::${ProdAccountId}:role/community-registry-extensions-publish-role"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt ArtifactBucket.Arn
              - !Join
                - ''
                - - !GetAtt ArtifactBucket.Arn
                  - /*
              - !GetAtt SourceBucket.Arn
              - !Join
                - ''
                - - !GetAtt SourceBucket.Arn
                  - /*
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Effect: Allow
            Resource: 
              - !GetAtt S3BucketNotificationBuildProject.Arn
              - !GetAtt S3DeleteBucketContentsBuildProject.Arn
              - !GetAtt S3BucketVersioningEnabledBuildProject.Arn
              - !GetAtt CloudFrontLoggingEnabledBuildProject.Arn
              - !GetAtt CloudFrontWebAclAssociationBuildProject.Arn
          - Action:
              - kms:*
            Effect: Allow
            Resource: "*"
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${PrefixLower}-${Env}-pipeline-topic"

  PipelineKey:
    Type: AWS::KMS::Key
    Metadata: 
      Comment: Required for cross account deployment from beta CodePipeline to the prod bucket
    Condition: IsBeta
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties: 
      Description: This key is used by the CEP beta build process to deploy builds to the prod bucket
      KeyPolicy: 
        Statement:
          - Action: 
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal: 
              AWS: 
                - !Sub "arn:aws:iam::${ProdAccountId}:root"
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/Admin"
            Resource: "*"
          - Action: 
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Effect: Allow
            Principal: 
              AWS: 
                - !GetAtt PipelineRole.Arn
                - !Sub "arn:aws:iam::${ProdAccountId}:root"
                - !GetAtt S3BucketNotificationBuildProjectRole.Arn
                - !GetAtt S3DeleteBucketContentsBuildProjectRole.Arn
                - !GetAtt S3BucketVersioningEnabledBuildProjectRole.Arn
                - !GetAtt CloudFrontLoggingEnabledBuildProjectRole.Arn
                - !GetAtt CloudFrontWebAclAssociationBuildProjectRole.Arn
            Resource: "*"
      MultiRegion: true

  PipelineKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsBeta
    Properties:
      AliasName: alias/cep-pipeline-publish-key
      TargetKeyId: !Ref PipelineKey

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Metadata:
      Comment: This pipeline runs integ tests on all extensions, then drops the build into the prod account for publishing
    DependsOn: WaitForPipelinePolicy
    Properties:
      Name: !Sub "cep-${Env}-${PrefixLower}"
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore: !If
        - IsBeta
        - Type: S3
          Location: !Ref ArtifactBucket
          EncryptionKey:
            Id: !Ref PipelineKey
            Type: KMS
        - Type: S3
          Location: !Ref ArtifactBucket
          EncryptionKey: !Ref AWS::NoValue
      Stages:
        - Name: Source
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration: 
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: "source.zip" 
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: extensions-source 
        - Name: Build
          Actions:
            #- Name: BucketNotification
            #  InputArtifacts:
            #    - Name: extensions-source
            #  ActionTypeId:
            #    Category: Build
            #    Owner: AWS
            #    Provider: CodeBuild
            #    Version: 1
            #  Configuration:
            #    ProjectName: !Ref S3BucketNotificationBuildProject
            #    EnvironmentVariables: |-
            #      [
            #        {
            #          "name": "RESOURCE_PATH",
            #          "type": "PLAINTEXT",
            #          "value": "resources/S3_BucketNotification"
            #        }
            #      ]
            #  RunOrder: 2
                #            - Name: CloudFrontWebAclAssociation
                #              InputArtifacts:
                #                - Name: extensions-source
                #              ActionTypeId:
                #                Category: Build
                #                Owner: AWS
                #                Provider: CodeBuild
                #                Version: 1
                #              Configuration:
                #                ProjectName: !Ref CloudFrontWebAclAssociationBuildProject
                #                EnvironmentVariables: |-
                #                  [
                #                    {
                #                      "name": "RESOURCE_PATH",
                #                      "type": "PLAINTEXT",
                #                      "value": "resources/CloudFront_WebACLAssociation"
                #                    }
                #                  ]
                #              RunOrder: 2
            - Name: S3DeleteBucketContents
              InputArtifacts:
                - Name: extensions-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref S3DeleteBucketContentsBuildProject
                EnvironmentVariables: |-
                  [
                    {
                      "name": "RESOURCE_PATH",
                      "type": "PLAINTEXT",
                      "value": "resources/S3_DeleteBucketContents"
                    }
                  ]
              RunOrder: 1
        - !If
          - IsBeta
          - Name: CopyBuildToProd
            Actions:
              - Name: Copy
                RoleArn: !Sub "arn:aws:iam::${ProdAccountId}:role/community-registry-extensions-publish-role"
                InputArtifacts: 
                  - Name: extensions-source
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: S3
                  Version: 1
                Configuration:
                  BucketName: !Sub "cep-source-${ProdAccountId}-prod-${PrefixLower}"
                  Extract: false
                  ObjectKey: source.zip
                  KMSEncryptionKeyARN: !GetAtt PipelineKey.Arn
          - !Ref AWS::NoValue
                #            - Name: S3BucketVersioningEnabled
                #              InputArtifacts:
                #                - Name: extensions-source
                #              ActionTypeId:
                #                Category: Build
                #                Owner: AWS
                #                Provider: CodeBuild
                #                Version: 1
                #              Configuration:
                #                ProjectName: !Ref S3BucketVersioningEnabledBuildProject
                #                EnvironmentVariables: |-
                #                  [
                #                    {
                #                      "name": "HOOK_PATH",
                #                      "type": "PLAINTEXT",
                #                      "value": "hooks/S3_BucketVersioningEnabled"
                #                    }
                #                  ]
                #              RunOrder: 2
                #            - Name: CloudFrontLoggingEnabled
                #              InputArtifacts:
                #                - Name: extensions-source
                #              ActionTypeId:
                #                Category: Build
                #                Owner: AWS
                #                Provider: CodeBuild
                #                Version: 1
                #              Configuration:
                #                ProjectName: !Ref CloudFrontLoggingEnabledBuildProject
                #                EnvironmentVariables: |-
                #                  [
                #                    {
                #                      "name": "HOOK_PATH",
                #                      "type": "PLAINTEXT",
                #                      "value": "hooks/CloudFront_LoggingEnabled"
                #                    }
                #                  ]
                #              RunOrder: 2

  # The webhook is invoked by GitHub when there is a push to a repo.
  # There is a webhook in the alpha account and in the beta account.
  # There is only one webhook for all namespaces in each env.
  # We don't replicate this in the templates for each 3rd party like Okta, etc.
  # The webhook handler and the CodeBuild it invokes clone the correct repo 
  # and drop the source into the correct bucket, which starts an independenent
  # pipeline for each namespace.

  WebHookBuildProjectRole:
    Type: AWS::IAM::Role
    Condition: IsNotProd
    Metadata: 
      Comment: Note that we give this project access to the source buckets for all 3rd parties, since we only have one instance of the webhook to start all pipelines when there is a push to one of the repos.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - 
          PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::cep-source-${AWS::AccountId}-${Env}-${PrefixLower}"
                  - !Sub "arn:aws:s3:::cep-source-${AWS::AccountId}-${Env}-${PrefixLower}/*"
                  - !Sub "arn:aws:s3:::cep-source-${AWS::AccountId}-${Env}-okta"
                  - !Sub "arn:aws:s3:::cep-source-${AWS::AccountId}-${Env}-okta/*"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Effect: Allow
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
            Version: '2012-10-17'
          PolicyName: webhook-build-project-policy

  WebHookBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: IsNotProd
    Metadata:
      Comment: |
        This build project is invoked by a Lambda that is called from GitHub
        webhooks configured on the repos handled by this build process. The
        lambda maps repos to the extension prefix, which is what determines the
        bucket to drop the source into. A bucket notification starts the 
        related pipeline.  
    Properties:
      Name: !Sub "cep-${Env}-webhook"
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: false
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: GIT_URL
          Type: PLAINTEXT
          Value: "Placeholder - lambda will provide when it invokes"
        - Name: GIT_BRANCH
          Type: PLAINTEXT
          Value: !Ref GitBranch
        - Name: SOURCE_BUCKET_PREFIX
          Type: PLAINTEXT
          Value: !Sub "cep-source-${AWS::AccountId}-${Env}-"
        - Name: SOURCE_KEY
          Type: PLAINTEXT
          Value: "source.zip"
        - Name: COMMIT_MESSAGE
          Type: PLAINTEXT
          Value: "Placeholder - lambda will provide when it invokes"
        - Name: REPO
          Type: PLAINTEXT
          Value: "Placeholder - lambda will provide when it invokes"
        - Name: EXTENSION_PREFIX
          Type: PLAINTEXT
          Value: "Placeholder - lambda will provide when it invokes"
      ServiceRole: !GetAtt WebHookBuildProjectRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo $GIT_URL
                - echo $GIT_BRANCH
                - echo $SOURCE_BUCKET
                - git clone --depth=1 --branch=$GIT_BRANCH $GIT_URL /tmp/source
                - cd /tmp/source
                - zip -r source.zip *  
                - echo "COMMIT_MESSAGE is $COMMIT_MESSAGE"
                - METADATA="{\"codepipeline-artifact-revision-summary\":\""
                - METADATA="${METADATA}${COMMIT_MESSAGE}"
                - METADATA="${METADATA}\"}"
                - echo "METADATA is $METADATA"
                - aws s3 cp source.zip s3://${SOURCE_BUCKET_PREFIX}${EXTENSION_PREFIX}/ --metadata "${METADATA}"


  WebHookHandlerRole:
    Type: AWS::IAM::Role
    Condition: IsNotProd
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: lambdaexec
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
              - Action:
                  - codebuild:StartBuild 
                Effect: Allow
                Resource: !GetAtt WebHookBuildProject.Arn 
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource: !Ref GitHubSecretArn 

  WebHookHandler:
    Type: AWS::Lambda::Function
    Condition: IsNotProd
    Properties:
      Code: webhook.py
      Role: !GetAtt WebHookHandlerRole.Arn
      Handler: webhook.handler
      Runtime: python3.7
      MemorySize: 1024
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref SourceBucket
          SOURCE_KEY: "source.zip"
          GIT_URL: !Ref GitUrl
          GIT_BRANCH: !Ref GitBranch
          BUILD_PROJECT: !Ref WebHookBuildProject
          SECRET_ARN: !Ref GitHubSecretArn

  WebHookRestApi:
    Type: AWS::ApiGateway::RestApi
    Condition: IsNotProd
    Properties:
      Name: !Sub "cep-${Env}-github-webhook"

  WebHookCloudWatchRole:
    Type: AWS::IAM::Role
    Condition: IsNotProd
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      Path: /
      Policies:
        -
          PolicyName: cwlogsapigateway
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: "*"

  WebHookAccount:
    Type: AWS::ApiGateway::Account
    Condition: IsNotProd
    Properties:
      CloudWatchRoleArn: !GetAtt WebHookCloudWatchRole.Arn
    DependsOn: WebHookRestApi

  WebHookDeployment:
    Type: AWS::ApiGateway::Deployment
    Condition: IsNotProd
    Properties:
      RestApiId: !Ref WebHookRestApi
    DependsOn:
      - WebHookANYProxy
      - WebHookANYRoot

  WebHookStage:
    Type: AWS::ApiGateway::Stage
    Condition: IsNotProd
    Properties:
      RestApiId: !Ref WebHookRestApi
      DeploymentId: !Ref WebHookDeployment
      StageName: prod

  WebHookProxy:
    Type: AWS::ApiGateway::Resource
    Condition: IsNotProd
    Properties:
      ParentId: !GetAtt WebHookRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref WebHookRestApi

  WebHookRestApiPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNotProd
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebHookHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebHookRestApi}/*/*/*" 

  WebHookRestApiRootPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNotProd
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebHookHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebHookRestApi}/*/*/" 

  WebHookANYRoot:
    Type: AWS::ApiGateway::Method
    Condition: IsNotProd
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt WebHookRestApi.RootResourceId
      RestApiId: !Ref WebHookRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebHookHandler.Arn}/invocations"

  WebHookANYProxy:
    Type: AWS::ApiGateway::Method
    Condition: IsNotProd
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref WebHookProxy
      RestApiId: !Ref WebHookRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebHookHandler.Arn}/invocations"

  PublishBuildBucketRole:
    Type: AWS::IAM::Role
    Condition: IsBeta
    Metadata:
      Comment: Allows the beta account to put builds into the prod bucket
    Properties:
      RoleName: cep-publish-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: put-builds
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: s3:PutObject
                Resource: 
                  - !Sub "arn:aws:s3:::cep-source-${ProdAccountId}-prod-${PrefixLower}"
                  - !Sub "arn:aws:s3:::cep-source-${ProdAccountId}-prod-${PrefixLower}/*"

  PipelineTopic:
    Type: AWS::SNS::Topic
    Metadata:
      Comment: Topic for pipeline notifications
    DependsOn: Pipeline
    Properties:
      TopicName: !Sub "${PrefixLower}-${Env}-pipeline-topic"
      Subscription:
        - Endpoint: !Ref NotificationEmail 
          Protocol: email

  WaitForPipelinePolicy:
    Type: Custom::Delay
    DependsOn: 
      - PipelinePolicy
    Properties:
      ServiceToken: !GetAtt DelayFunction.Arn
      SecondsToSleep: 20

  WaitForPipeline:
    Type: Custom::Delay
    DependsOn: 
      - Pipeline
    Properties:
      ServiceToken: !GetAtt DelayFunction.Arn
      SecondsToSleep: 10

  WaitForTopic:
    Type: Custom::Delay
    DependsOn: 
      - PipelineTopic
      - PipelineTopicPolicy
    Properties:
      ServiceToken: !GetAtt DelayFunction.Arn
      SecondsToSleep: 10

  PipelineTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: MyTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: sns:Publish
          Resource: !Ref PipelineTopic
      Topics:
      - !Ref PipelineTopic

  PipelineEventRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Allows the event rule to push to the topic
    Properties:
      RoleName: !Sub "cep-${Env}-${PrefixLower}-pipeline-event-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: put-events
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: sns:Publish
                Resource: !Ref PipelineTopic

  PipelineEventRule:
    Type: AWS::Events::Rule
    DependsOn: WaitForTopic
    Properties:
      Description: Watch for pipeline success and failure
      EventPattern: 
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          pipeline: 
            - !Ref Pipeline
          state:
            - SUCCEEDED
            - FAILED
      Name: !Sub "cep-${PrefixLower}-${Env}-pipelines"
      Targets:
        - Arn: !Sub "arn:aws:sns:us-east-1:${AWS::AccountId}:${PrefixLower}-${Env}-pipeline-topic"
          Id: pipeline-topic-target
          InputTransformer:
            InputTemplate: '"The pipeline <pipeline> from account <account> has <state> at <at>."'
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              state: "$.detail.state"
              at: "$.time"
              account: "$.account"

# Prod account resources

  PublishBuildBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsProd
    Metadata:
      Comment: Allows the beta account to drop builds into the prod account.
    Properties:
      Bucket: !Ref SourceBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: BetaAccountPut
            Effect: Allow
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${BetaAccountId}:root"
                - !GetAtt PublishCrossAccountRole.Arn
            Action: s3:PutObject
            Resource: 
              - !Sub "arn:aws:s3:::cep-source-${ProdAccountId}-prod-${PrefixLower}"
              - !Sub "arn:aws:s3:::cep-source-${ProdAccountId}-prod-${PrefixLower}/*"

  HandlerBucket:
    Type: AWS::S3::Bucket
    Condition: IsProd
    Metadata:
      Comment: This bucket holds the handler package and logs for extension publishing
    Properties:
      BucketName: !Sub "cep-handler-${AWS::AccountId}"

  StackSetAdministrationRole:
    Type: AWS::IAM::Role
    Condition: IsProd
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/AWSCloudFormationStackSetExecutionRole"

  StackSetExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsProd
    Metadata:
      Comment: We can limit this role to this account, since we are using stack sets to deploy across all regions, but not to multiple accounts
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "${AWS::AccountId}"
            Action:
              - sts:AssumeRole
      Path: /

  StackSetExecutionPolicy:
    Type: AWS::IAM::Policy
    Condition: IsProd
    Properties:
      Roles:
        - !Ref StackSetExecutionRole
      PolicyName: cep-stack-set-execution
      PolicyDocument:
        Statement:
          - Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:GetRolePolicy
              - iam:PassRole
            Effect: Allow
            Resource: "*"
          - Action:
              - codebuild:*
            Effect: Allow
            Resource: "*" 
          - Action:
              - codepipeline:*
            Effect: Allow
            Resource: "*"
          - Action: 
              - s3:*
            Effect: Allow
            Resource: "*"
          - Action:
              - events:*
            Effect: Allow
            Resource: "*"
          - Action:
              - cloudformation:*
            Effect: Allow
            Resource: "*"
          - Action:
              - sns:*
            Effect: Allow
            Resource: "*"
          - Action:
              - codestar-notifications:*
            Effect: Allow
            Resource: "*"

  PublishCrossAccountRole:
    Type: AWS::IAM::Role
    Condition: IsProd
    Metadata:
      Comment: Assumed by codepipeline in the beta account to access the prod source bucket
    Properties:
      RoleName: community-registry-extensions-publish-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${BetaAccountId}:root"
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cross-account-pipeline-deploy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::cep-source-${ProdAccountId}-prod-${PrefixLower}"
                  - !Sub "arn:aws:s3:::cep-source-${ProdAccountId}-prod-${PrefixLower}/*"
                  - !Sub "arn:aws:s3:::cep-beta-${BetaAccountId}-artifacts"
                  - !Sub "arn:aws:s3:::cep-beta-${BetaAccountId}-artifacts/*"
              - Action: 
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:kms:${AWS::Region}:${BetaAccountId}:key/*"
              
# Delay Function to solve race conditions where the resource is not actually ready

  DelayFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "lambda-logs"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:logs:*:*:*"

  DelayFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: delay.handler
      Timeout: 120
      Role: !GetAtt DelayFunctionRole.Arn
      Runtime: python3.7
      Code: delay.py 
      MemorySize: 1024

